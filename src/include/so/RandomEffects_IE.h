/* libsoc - Library to handle standardised output files
 * Copyright (C) 2015 Rikard Nordgren
 * 
 * This file was autogenerated and should not be edited
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 * 
 * his library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */
#ifndef _SO_RANDOMEFFECTS_IE_H
#define _SO_RANDOMEFFECTS_IE_H

#include <so/Table.h>

/** \struct so_RandomEffects_IE
	 \brief A structure representing an SO/SOBlock/Estimation/IndividualEstimates/RandomEffects element
*/
typedef struct so_RandomEffects_IE so_RandomEffects_IE;

/** \memberof so_RandomEffects_IE
 * Create a new empty so_RandomEffects_IE structure.
 * \return A pointer to the newly created struct or NULL if memory allocation failed
 * \sa so_RandomEffects_IE_copy, so_RandomEffects_IE_free
 */
so_RandomEffects_IE *so_RandomEffects_IE_new();
/** \memberof so_RandomEffects_IE
 * Create a copy of a so_RandomEffects_IE structure.
 * \return A pointer to the newly created struct or NULL if memory allocation failed
 * \sa so_RandomEffects_IE_new
 */
so_RandomEffects_IE *so_RandomEffects_IE_copy(so_RandomEffects_IE *self);
/** \memberof so_RandomEffects_IE
 * Free all memory associated with a so_RandomEffects_IE structure and its children.
 * \param self - a pointer to the structure to free
 * \sa so_RandomEffects_IE_new
 */
void so_RandomEffects_IE_free(so_RandomEffects_IE *self);
void so_RandomEffects_IE_ref(so_RandomEffects_IE *self);
void so_RandomEffects_IE_unref(so_RandomEffects_IE *self);
/** \memberof so_RandomEffects_IE
 * Get the EffectMean element
 * \param self - pointer to a so_RandomEffects_IE
 * \return A pointer to the structure representing the EffectMean element
 * \sa so_RandomEffects_IE_set_EffectMean
 */
so_Table *so_RandomEffects_IE_get_EffectMean(so_RandomEffects_IE *self);
/** \memberof so_RandomEffects_IE
 * Get the EffectMedian element
 * \param self - pointer to a so_RandomEffects_IE
 * \return A pointer to the structure representing the EffectMedian element
 * \sa so_RandomEffects_IE_set_EffectMedian
 */
so_Table *so_RandomEffects_IE_get_EffectMedian(so_RandomEffects_IE *self);
/** \memberof so_RandomEffects_IE
 * Get the EffectMode element
 * \param self - pointer to a so_RandomEffects_IE
 * \return A pointer to the structure representing the EffectMode element
 * \sa so_RandomEffects_IE_set_EffectMode
 */
so_Table *so_RandomEffects_IE_get_EffectMode(so_RandomEffects_IE *self);
/** \memberof so_RandomEffects_IE
 * Get the Samples element
 * \param self - pointer to a so_RandomEffects_IE
 * \return A pointer to the structure representing the Samples element
 * \sa so_RandomEffects_IE_set_Samples
 */
so_Table *so_RandomEffects_IE_get_Samples(so_RandomEffects_IE *self);
/** \memberof so_RandomEffects_IE
 * Set the EffectMean element
 * \param self - pointer to a so_RandomEffects_IE
 * \param value - A pointer to a \a so_Table to set.
 * \sa so_RandomEffects_IE_get_EffectMean
 */
void so_RandomEffects_IE_set_EffectMean(so_RandomEffects_IE *self, so_Table *value);
/** \memberof so_RandomEffects_IE
 * Set the EffectMedian element
 * \param self - pointer to a so_RandomEffects_IE
 * \param value - A pointer to a \a so_Table to set.
 * \sa so_RandomEffects_IE_get_EffectMedian
 */
void so_RandomEffects_IE_set_EffectMedian(so_RandomEffects_IE *self, so_Table *value);
/** \memberof so_RandomEffects_IE
 * Set the EffectMode element
 * \param self - pointer to a so_RandomEffects_IE
 * \param value - A pointer to a \a so_Table to set.
 * \sa so_RandomEffects_IE_get_EffectMode
 */
void so_RandomEffects_IE_set_EffectMode(so_RandomEffects_IE *self, so_Table *value);
/** \memberof so_RandomEffects_IE
 * Set the Samples element
 * \param self - pointer to a so_RandomEffects_IE
 * \param value - A pointer to a \a so_Table to set.
 * \sa so_RandomEffects_IE_get_Samples
 */
void so_RandomEffects_IE_set_Samples(so_RandomEffects_IE *self, so_Table *value);
/** \memberof so_RandomEffects_IE
 * Create a new EffectMean element and insert it into the so_RandomEffects_IE
 * \param self - pointer to a so_RandomEffects_IE
 * \return A pointer to the newly created structure or NULL if memory allocation failed
 */
so_Table *so_RandomEffects_IE_create_EffectMean(so_RandomEffects_IE *self);
/** \memberof so_RandomEffects_IE
 * Create a new EffectMedian element and insert it into the so_RandomEffects_IE
 * \param self - pointer to a so_RandomEffects_IE
 * \return A pointer to the newly created structure or NULL if memory allocation failed
 */
so_Table *so_RandomEffects_IE_create_EffectMedian(so_RandomEffects_IE *self);
/** \memberof so_RandomEffects_IE
 * Create a new EffectMode element and insert it into the so_RandomEffects_IE
 * \param self - pointer to a so_RandomEffects_IE
 * \return A pointer to the newly created structure or NULL if memory allocation failed
 */
so_Table *so_RandomEffects_IE_create_EffectMode(so_RandomEffects_IE *self);
/** \memberof so_RandomEffects_IE
 * Create a new Samples element and insert it into the so_RandomEffects_IE
 * \param self - pointer to a so_RandomEffects_IE
 * \return A pointer to the newly created structure or NULL if memory allocation failed
 */
so_Table *so_RandomEffects_IE_create_Samples(so_RandomEffects_IE *self);

#endif
